name: Migrate Repository - GQL

on:
  workflow_dispatch:
    inputs:
      source_org:
        description: 'Source organization'
        required: true
      target_org:
        description: 'Target organization'
        required: true
      repo_name:
        description: 'Repository name'
        required: true

jobs:
  migrate:
    runs-on: ubuntu-latest

    steps:
      - name: Set Up Environment Variables
        run: |
          echo "GH_TOKEN=${{ secrets.PAT_TOKEN }}" >> $GITHUB_ENV
          echo "SOURCE_ORG=${{ inputs.source_org }}" >> $GITHUB_ENV
          echo "TARGET_ORG=${{ inputs.target_org }}" >> $GITHUB_ENV
          echo "REPO_NAME=${{ inputs.repo_name }}" >> $GITHUB_ENV

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Fetch Target Organization ID
        id: fetch_org_id
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}
          TARGET_ORG: ${{ env.TARGET_ORG }}
        run: |
          ORG_ID=$(curl -s -X POST -H "Authorization: Bearer $GH_TOKEN" -H "Content-Type: application/json" \
          -d '{"query": "query { organization(login: \"'$TARGET_ORG'\") { id } }"}' https://api.github.com/graphql | jq -r '.data.organization.id')
          echo "ORG_ID=$ORG_ID" >> $GITHUB_ENV
          echo "::set-output name=ORG_ID::$ORG_ID"

      - name: Initiate Repository Migration
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}
          ORG_ID: ${{ steps.fetch_org_id.outputs.ORG_ID }}
          SOURCE_ORG: ${{ env.SOURCE_ORG }}
          REPO_NAME: ${{ env.REPO_NAME }}
        run: |
          SOURCE_REPO_URL="https://github.com/$SOURCE_ORG/$REPO_NAME"
          TARGET_REPO_NAME="$REPO_NAME"
          curl -s -X POST -H "Authorization: Bearer $GH_TOKEN" -H "Content-Type: application/json" \
          -d '{
            "query": "mutation { startRepositoryMigration(input: { sourceRepositoryUrl: \"'$SOURCE_REPO_URL'\", targetRepositoryName: \"'$TARGET_REPO_NAME'\", targetOwnerId: \"'$ORG_ID'\" }) { repositoryMigration { id } } }"
          }' https://api.github.com/graphql | jq -r '.data.startRepositoryMigration.repositoryMigration.id' > migration_id.txt
          echo "Migration initiated. Migration ID: $(cat migration_id.txt)"

      - name: Monitor Migration Status
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}
        run: |
          MIGRATION_ID=$(cat migration_id.txt)
          STATUS="PENDING"
          while [ "$STATUS" != "SUCCEEDED" ] && [ "$STATUS" != "FAILED" ]; do
            STATUS=$(curl -s -X POST -H "Authorization: Bearer $GH_TOKEN" -H "Content-Type: application/json" \
            -d '{
              "query": "query { node(id: \"'$MIGRATION_ID'\") { ... on RepositoryMigration { status } } }"
            }' https://api.github.com/graphql | jq -r '.data.node.status')
            echo "Current migration status: $STATUS"
            if [ "$STATUS" != "SUCCEEDED" ] && [ "$STATUS" != "FAILED" ]; then
              sleep 10
            fi
          done
          if [ "$STATUS" == "SUCCEEDED" ]; then
            echo "Migration completed successfully."
          else
            echo "Migration failed."
            exit 1
          fi
