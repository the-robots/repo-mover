name: Migrate Repository

on:
  workflow_dispatch:
    inputs:
      source_org:
        description: 'Source organization'
        required: true
      target_org:
        description: 'Target organization'
        required: true
      repo_name:
        description: 'Repository name'
        required: true

jobs:
  migrate:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install @octokit/app@12.0.3 @octokit/auth-app@3.0.0

      - name: Generate JWT for GitHub App
        id: auth
        env:
          APP_ID: ${{ secrets.APP_ID }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: |
          echo "$PRIVATE_KEY" > private-key.pem
          node -e "
          const { createAppAuth } = require('@octokit/auth-app');
          const fs = require('fs');

          const auth = createAppAuth({
            appId: process.env.APP_ID,
            privateKey: fs.readFileSync('private-key.pem', 'utf8'),
          });

          auth({ type: 'app' }).then(appAuth => {
            const jwt = appAuth.token;
            fs.appendFileSync(process.env.GITHUB_OUTPUT, `jwt=${jwt}\n`);
          }).catch(error => {
            console.error('Failed to generate JWT:', error);
            process.exit(1);
          });
          "

      - name: Exchange JWT for Installation Token
        id: token
        run: |
          INSTALLATION_ID=$(curl -s -H "Authorization: Bearer ${{ steps.auth.outputs.jwt }}" -H "Accept: application/vnd.github.v3+json" https://api.github.com/app/installations | jq '.[0].id')
          INSTALLATION_TOKEN=$(curl -s -X POST -H "Authorization: Bearer ${{ steps.auth.outputs.jwt }}" -H "Accept: application/vnd.github.v3+json" https://api.github.com/app/installations/$INSTALLATION_ID/access_tokens | jq -r '.token')
          echo "token=${INSTALLATION_TOKEN}" >> $GITHUB_OUTPUT

      - name: Authenticate with GitHub CLI
        run: |
          echo "${{ steps.token.outputs.token }}" | gh auth login --with-token

      - name: Export Repository
        run: |
          ARCHIVE_PATH="/tmp/${{ inputs.repo_name }}.tar.gz"
          echo "Exporting repository..."
          gh gei archive create "${{ inputs.source_org }}/${{ inputs.repo_name }}" --output "$ARCHIVE_PATH"

      - name: Import Repository
        run: |
          gh gei import "$ARCHIVE_PATH" --target "${{ inputs.target_org }}/${{ inputs.repo_name }}"

      - name: Cleanup
        run: rm -f private-key.pem "$ARCHIVE_PATH"
